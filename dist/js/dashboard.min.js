angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies', 'uiGmapgoogle-maps']);
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/');

        // Application routes
        $stateProvider
            .state('index', {
                url: '/',
                templateUrl: 'templates/tables.html',
                controller: 'TablesController'
            })
    }
]);


angular.module('RDash').config(function(uiGmapGoogleMapApiProvider) {
    uiGmapGoogleMapApiProvider.configure({
        key: 'AIzaSyDfWgCvLg6ldpAjywXHETQ2MISWpaIAoU4',
        v: '3.20', //defaults to latest 3.X anyhow
        libraries: 'weather,geometry,visualization'
    });
})
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [
    // {
    //     type: 'success',
    //     msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    // }, {
    //     type: 'danger',
    //     msg: 'Found a bug? Create an issue with as many details as you can.'
    // }
    ];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Master Controller
 */

angular.module('RDash')

.controller('MasterCtrl', ['$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };
}
/**
 * Tables Controller
 */

angular
    .module('RDash')
    .controller('TablesController', function($scope, $http, uiGmapGoogleMapApi) {

    $scope.selectedHAI = "Clostridium difficile Infection (CDI)";
    $scope.selectedHAIYear = "2015"

    $scope.haiList = [
        {'name': 'SSI', 'value': 'SSI'},
        {'name': 'CLABSI', 'value': 'CLABSI'},
        {'name': 'CDI', 'value': 'Clostridium difficile Infection (CDI)'},
        {'name': 'MRSA BSI', 'value': 'Methicillin-Resistant Staphylococcus aureus Bloodstream Infection (MRSA BSI)'},
        {'name': 'VRE BSI', 'value': 'Vancomycin-Resistant Enterococci Bloodstream Infection (VRE BSI)'}
    ];

    $scope.$watch('selectedHAI', function(newValue, oldValue) {
        if($scope.selectedHAI == 'SSI'){
            getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=SSI');
        } else if($scope.selectedHAI == 'CLABSI'){
            getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=CLABSI');
        } else if($scope.selectedHAI == 'Clostridium difficile Infection (CDI)'){
            getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=Clostridium difficile Infection (CDI)');
        } else if($scope.selectedHAI == 'Methicillin-Resistant Staphylococcus aureus Bloodstream Infection (MRSA BSI)'){
            getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=Methicillin-Resistant Staphylococcus aureus Bloodstream Infection (MRSA BSI)');
        } else if($scope.selectedHAI == 'Vancomycin-Resistant Enterococci Bloodstream Infection (VRE BSI)'){
            getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=Vancomycin-Resistant Enterococci Bloodstream Infection (VRE BSI)');
        } else {
            $scope.selectedHAIData = []
        }
    });

    $scope.$watch('selectedHAIYear', function(newValue, oldValue) {
        getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=' + $scope.selectedHAI);
    });

    $scope.haiList = [
        {'name': 'Select an HAI', 'value': ''},
        {'name': 'SSI', 'value': 'SSI'},
        {'name': 'CLABSI', 'value': 'CLABSI'},
        {'name': 'CDI', 'value': 'Clostridium difficile Infection (CDI)'},
        {'name': 'MRSA BSI', 'value': 'Methicillin-Resistant Staphylococcus aureus Bloodstream Infection (MRSA BSI)'},
        {'name': 'VRE BSI', 'value': 'Vancomycin-Resistant Enterococci Bloodstream Infection (VRE BSI)'}
    ];

    $scope.haiYears = [        
        {'name': '2015', 'value': '2015'},
        {'name': '2014', 'value': '2014'},
        {'name': '2013', 'value': '2013'}
    ];

    function shortenHAI(HAI){
        if(HAI === 'Clostridium difficile Infection (CDI)') {
            return 'CDI'
        } else if(HAI === 'Methicillin-Resistant Staphylococcus aureus Bloodstream Infection (MRSA BSI)') {
            return 'MRSA'
        } else if(HAI === 'Vancomycin-Resistant Enterococci Bloodstream Infection (VRE BSI)') {
            return 'VRE' 
        } else {
            return HAI
        }
    }
    function getData(url){
        $http({
          method: 'GET',
          url: url
        }).then(function successCallback(response) {
            $scope.selectedHAIData = [];
            $scope.selectedHAIData = response.data.AllHospital
            $scope.heatmapData = [];
            $scope.hospitalMarkers = [];
            for (var key in $scope.selectedHAIData) {
              if ($scope.selectedHAIData.hasOwnProperty(key)) {
                var thisLat = $scope.selectedHAIData[key].Latitude;
                var thisLng = $scope.selectedHAIData[key].longitude;
                var myLatLng = {lat: thisLat, lng: thisLng};
                var thisWgt = $scope.selectedHAIData[key].Rate * 50;
                $scope.heatmapData.push({location: new google.maps.LatLng(thisLat, thisLng), weight: thisWgt});
                //$scope.hospitalMarkers.push({id: $scope.selectedHAIData[key].HospitalID, position: myLatLng, title: response.data[key].Hospital});
              }
            };
            addLayer($scope.thisLayer, $scope.heatmapData);
        }, function errorCallback(response) {
            console.log(response);
        });
    }

    function addLayer(layer, dataset){
      var pointArray = new google.maps.MVCArray(dataset);
      layer.setData(pointArray);
      layer.set('opacity', .8);
      layer.set('maxIntensity', 100);
      layer.set('radius', 15);
    }

    $scope.findOnMap = function(Latitude, longitude, id, hospital){
        $scope.selectedHospital = hospital;
        $scope.map = { 
          center: {latitude: Latitude, longitude: longitude}, 
          zoom: 9,
          heatLayerCallback: function (layer) {
            $scope.thisLayer = layer;
            //set the heat layers backend data
            $scope.heatmapLayer = new addLayer(layer, $scope.heatmapData);
          },
          showHeat: true
        };

        $http({
          method: 'GET',
          url: "http://52.88.106.174:8080/HealthCare/Get/Hospital/ID=" + id
        }).then(function successCallback(response) {
            //success
            //console.log(response.data.AllHospital);
            $scope.jsonGraphData = [];
            var hospitalArray = response.data.AllHospital

            for (var datapoint in hospitalArray){
               //console.log(datapoint);
               if(hospitalArray[datapoint].Patient_care_area != ''){
                    console.log('Crappy dupe?');
               } else {
                var Year = 'Jan ' + String(hospitalArray[datapoint].Year);
               $scope.jsonGraphData.push({'date': Year, 'hai': shortenHAI(hospitalArray[datapoint].HAI), 'rate': hospitalArray[datapoint].Rate});
               }
               
            }
            killOldGraph();
            makeGraph();
        }, function errorCallback(response) {
            //fail
            console.log('FAIL: ' + response);
        })
    };

    
   
    // Do stuff with your $scope.
    // Note: Some of the directives require at least something to be defined originally!
    // e.g. $scope.markers = []

    // uiGmapGoogleMapApi is a promise.
    // The "then" callback function provides the google.maps object.
    uiGmapGoogleMapApi.then(function(maps) {
      //console.log("Got it");
      $scope.findOnMap(37.775, -122.434, 0, 'Select a hospital on the right to view more data')  //  San Francisco...
    });

//getData('http://52.88.106.174:8080/HealthCare/Get/Hospital/Year=' + $scope.selectedHAIYear + '/HAI=' + $scope.selectedHAI);

function killOldGraph(){
    var myEl = angular.element( document.querySelector( '#bargraph' ) );
    myEl.empty();
}

function makeGraph(){
    // Set the dimensions of the canvas / graph
    var barWidth = angular.element(document.querySelector('#graphsHolder'));
    console.log(barWidth[0].clientWidth);
    var margin = {top: 10, right: 20, bottom: 70, left: 20}, 
    width = barWidth[0].clientWidth - margin.left - margin.left - margin.right,
    height = 300 - margin.top - margin.bottom;  

    // Parse the date / time
    var parseDate = d3.time.format("%b %Y").parse; 

    // Set the ranges
    var x = d3.time.scale().range([0, width]);
    var y = d3.scale.linear().range([height, 0]);

    // Define the axes
    var xAxis = d3.svg.axis().scale(x)
        .orient("bottom").ticks(5);

    var yAxis = d3.svg.axis().scale(y)
        .orient("left").ticks(5);

    // Define the line
    var rateline = d3.svg.line()
        .interpolate('basis')
        .x(function(d) { return x(d.date); })
        .y(function(d) { return y(d.rate); });
        
    // Adds the svg canvas
    var svg = d3.select("#bargraph")
        .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform", 
                  "translate(" + margin.left + "," + margin.top + ")");


    // Get the data
    d3.json("hai.csv", function(error, data) {
        if (error) {
            data = [];
            data = $scope.jsonGraphData;

            console.log($scope.jsonGraphData);

            data.forEach(function(d) {
              d.date = parseDate(d.date);
              d.rate = +d.rate;
            });

            // Scale the range of the data
            x.domain(d3.extent(data, function(d) { return d.date; }));
            y.domain([0, d3.max(data, function(d) { return d.rate; })]); 

            // Nest the entries by hai
            var dataNest = d3.nest()
                .key(function(d) {return d.hai;})
                .entries(data);


            var color = d3.scale.category10();

            legendSpace = width/dataNest.length; // spacing for legend // ******

            // Loop through each hai / key
            dataNest.forEach(function(d,i) {                           // ******

                svg.append("path")
                    .attr("class", "line")
                    .style("stroke", function() {
                        return d.color = color(d.key); })
                    .attr("id", 'tag'+d.key.replace(/\s+/g, '')) // assign ID **
                    .attr("d", rateline(d.values));

                // Add the Legend
                svg.append("text")
                    .attr("x", (legendSpace/2)+i*legendSpace)
                    .attr("y", height + (margin.bottom/2)+ 5)
                    .attr("class", "legend")
                    .style("fill", function() {
                        return d.color = color(d.key); })
                    .on("click", function(){                     // ************
                        // Determine if current line is visible 
                        var active   = d.active ? false : true,  // ************ 
                        newOpacity = active ? 0 : 1;             // ************
                        // Hide or show the elements based on the ID
                        d3.select("#tag"+d.key.replace(/\s+/g, '')) // *********
                            .transition().duration(100)          // ************
                            .style("opacity", newOpacity);       // ************
                        // Update whether or not the elements are active
                        d.active = active;                       // ************
                        })                                       // ************
                    .text(d.key);                              // *******

            });

            // Add the X Axis
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

            // Add the Y Axis
            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis);
        }
    })

};



    


});
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};